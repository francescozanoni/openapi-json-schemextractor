openapi: 3.0.0
info:
  title: 'Student management API'
  version: 1.0.0
servers:
- url: 'http://localhost:8080'
paths:
  /students:
    get:
      summary: 'Returns a list of students'
      operationId: getStudents
      tags:
      - students
      parameters:
      - $ref: '#/components/parameters/WithAudits'
      responses:
        200:
          $ref: '#/components/responses/Students'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: 'Creates a new student'
      operationId: createStudent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStudent'
      tags:
      - students
      parameters:
      - $ref: '#/components/parameters/UserId'
      responses:
        200:
          $ref: '#/components/responses/Student'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  '/students/{id}':
    get:
      summary: 'Returns a student'
      operationId: getStudentById
      tags:
      - students
      parameters:
      - name: id
        in: path
        required: true
        description: 'The ID of the student to retrieve'
        schema:
          type: integer
      - $ref: '#/components/parameters/WithAudits'
      responses:
        200:
          $ref: '#/components/responses/Student'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: 'Updates a student'
      operationId: updateStudentById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStudent'
      tags:
      - students
      parameters:
      - name: id
        in: path
        required: true
        description: 'The ID of the student to update'
        schema:
          type: integer
      - $ref: '#/components/parameters/UserId'
      responses:
        200:
          $ref: '#/components/responses/Student'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: 'Deletes a student'
      operationId: deleteStudentById
      tags:
      - students
      parameters:
      - name: id
        in: path
        required: true
        description: 'The ID of the student to delete'
        schema:
          type: integer
      - $ref: '#/components/parameters/UserId'
      responses:
        200:
          $ref: '#/components/responses/ResourceDeletion'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    WithAudits:
      in: query
      name: with_audits
      description: 'Flag indicating whether resources must be returned with audits'
      schema:
        type: boolean
      required: false
    UserId:
      in: header
      name: x-user-id
      description: 'User ID, used to mark audit ownership'
      schema:
        type: integer
      required: false
  responses:
    BadRequest:
      description: 'Response reporting invalid request'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
                description: 'Reason making request invalid'
              data:
                type: object
                description: 'Input item(s) making request invalid'
            required:
            - status_code
            - status
            - message
            - data
            example:
              status_code: 400
              status: 'Bad Request'
              message: 'Request is not valid'
              data:
                id:
                - 'code error_type'
                - 'value abc'
                - 'expected integer'
                - 'used string'
    NotFound:
      description: 'Generic response reporting no resource(s) found'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
            required:
            - status_code
            - status
            - message
            example:
              status_code: 404
              status: 'Not Found'
              message: 'Resource(s) not found'
    InternalServerError:
      description: 'Generic response reporting an unexpected error'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
            required:
            - status_code
            - status
            - message
            example:
              status_code: 500
              status: 'Internal Server Error'
              message: 'An internal server error occurred'
    Students:
      description: 'Response returning a list of students'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
            required:
            - status_code
            - status
            - message
            - data
            example:
              status_code: 200
              status: OK
              message: 'Resource(s) found'
              data:
              - id: 1
                first_name: John
                last_name: Doe
                e_mail: john.doe@foo.com
                phone: 1234-567890
                nationality: GB
              - id: 2
                first_name: Jane
                last_name: Doe
                e_mail: jane.doe@bar.com
                nationality: CA
    Student:
      description: 'Response returning a student'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
              data:
                $ref: '#/components/schemas/Student'
            required:
            - status_code
            - status
            - message
            - data
            example:
              status_code: 200
              status: OK
              message: 'Resource successfully retrieved/created/modified'
              data:
                id: 1
                first_name: John
                last_name: Doe
                e_mail: john.doe@foo.com
                phone: 1234-567890
                nationality: GB
    ResourceDeletion:
      description: 'Response confirming deletion of a resource'
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: integer
                description: 'HTTP status code'
              status:
                type: string
                description: 'HTTP status description'
              message:
                type: string
            required:
            - status_code
            - status
            - message
            example:
              status_code: 200
              status: OK
              message: 'Resource deleted'
  schemas:
    Audit:
      type: object
      properties:
        id:
          type: integer
        event:
          type: string
        old_values:
          type: object
        new_values:
          type: object
        user_id:
          type: integer
        created_at:
          type: string
      required:
      - id
      - event
      - created_at
      example:
        id: 6
        event: updated
        old_values:
          title: 'First title'
          content: 'First content'
          student_id: 1
          id: 1
        new_values:
          title: 'First modified title'
          content: 'First modified content'
          student_id: 1
          id: 1
        user_id: 34
        created_at: '2019-01-01 01:00:00'
    Auditable:
      type: object
      properties:
        audits:
          type: array
          items:
            $ref: '#/components/schemas/Audit'
      example:
        audits:
        - id: 3
          event: created
          new_values:
            title: 'First title'
            content: 'First content'
            student_id: 1
            id: 1
          user_id: 12
          created_at: '2019-01-01 00:00:00'
        - id: 6
          event: updated
          old_values:
            title: 'First title'
            content: 'First content'
            student_id: 1
            id: 1
          new_values:
            title: 'First modified title'
            content: 'First modified content'
            student_id: 1
            id: 1
          user_id: 34
          created_at: '2019-01-01 01:00:00'
    NewStudent:
      type: object
      properties:
        first_name:
          type: string
          minLength: 2
        last_name:
          type: string
          minLength: 2
        e_mail:
          type: string
        phone:
          type: string
        nationality:
          type: string
          pattern: '^[A-Z]{2}$'
      required:
      - first_name
      - last_name
      - e_mail
      - nationality
      additionalProperties: false
      example:
        first_name: John
        last_name: Doe
        e_mail: john.doe@foo.com
        phone: 1234-567890
        nationality: GB
    Student:
      allOf:
      - $ref: '#/components/schemas/NewStudent'
      - $ref: '#/components/schemas/Auditable'
      - type: object
        properties:
          id:
            type: integer
        required:
        - id
        additionalProperties: false
      example:
        id: 1
        first_name: John
        last_name: Doe
        e_mail: john.doe@foo.com
        phone: 1234-567890
        nationality: GB